<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import numpy, os, shutil%%00010from subprocess import call%%00010from pandas import DataFrame, Series%%00010%%00010copia = input_table.copy()%%00010%%00010# -----------------------------------------------%%00010# ----------- PLEASE EDIT THESE VARS ------------%%00010# -----------------------------------------------%%00010%%00010# Path to AutoDock Vina%%00010vina = 'vina'%%00010# Write the complete path to the receptor in pdbqt format%%00010receptor = '/home/zronyj/Desktop/Tefy_Tesis/Stage 0/pdbqt/2BPW.pdbqt'%%00010# Coordinates to the center of the box%%00010px = 14%%00010py = 24%%00010pz = 7%%00010# Size of the box%%00010bx = 20%%00010by = 20%%00010bz = 20%%00010# How many cores do you have on your CPU%%00010cpu = 4%%00010# How extensive should the search be (default = 8)%%00010ex = 8%%00010# How many modes should ADVina find (default = 10)%%00010res = 10%%00010# Energy range (default = 3)%%00010ran = 3%%00010%%00010# -----------------------------------------------%%00010# ----------- DO NOT EDIT AFTER THIS ------------%%00010# -----------------------------------------------%%00010%%00010os.chdir(flow_variables['knime.workspace'])%%00010try:%%00010%%00009os.mkdir('py_temp')%%00010except Exception as e:%%00010%%00009shutil.rmtree('py_temp')%%00010%%00009os.mkdir('py_temp')%%00010%%00009print 'A little error was caught trying to annoy you:', e%%00010os.chdir('py_temp')%%00010%%00010new_data = {}%%00010new_ener = {}%%00010new_name = {}%%00010%%00010def extract(file_name):%%00010%%00009find_energy = 'REMARK VINA RESULT:'%%00010%%00009with open(file_name) as f:%%00010%%00009%%00009pdbqt = ''%%00010%%00009%%00009for line in f:%%00010%%00009%%00009%%00009if line != 'ENDMDL\n':%%00010%%00009%%00009%%00009%%00009pdbqt += line%%00010%%00009%%00009%%00009else:%%00010%%00009%%00009%%00009%%00009pdbqt += line%%00010%%00009%%00009%%00009%%00009break%%00010%%00009%%00009%%00009if line[:len(find_energy)] == find_energy:%%00010%%00009%%00009%%00009%%00009decomposed = line.split(' ')%%00010%%00009%%00009%%00009%%00009energy = 0%%00010%%00009%%00009%%00009%%00009for piece in decomposed:%%00010%%00009%%00009%%00009%%00009%%00009try:%%00010%%00009%%00009%%00009%%00009%%00009%%00009energy += float(piece)%%00010%%00009%%00009%%00009%%00009%%00009except Exception as e:%%00010%%00009%%00009%%00009%%00009%%00009%%00009energy += 0%%00010%%00009return pdbqt, str(energy)%%00010%%00010for f in copia['Molecules'].keys():%%00010%%00009pre_file = '{0}.pdbqt'.format(f)%%00010%%00009x = open(pre_file, 'w')%%00010%%00009x.write(input_table['Molecules'][f])%%00010%%00009x.close()%%00010%%00009conf_file = 'config_{0}.vcf'.format(f)%%00010%%00009a = open(conf_file, 'w')%%00010%%00009inp =&quot;&quot;&quot;receptor = {0}%%00010ligand = {1}.pdbqt%%00010out = OUT_{1}.pdbqt%%00010log = OUT_{1}.log%%00010center_x = {2}%%00010center_y = {3}%%00010center_z = {4}%%00010size_x = {5}%%00010size_y = {6}%%00010size_z = {7}%%00010cpu = {8}%%00010exhaustiveness = {9}%%00010num_modes = {10}%%00010energy_range = {11}&quot;&quot;&quot;.format(receptor, f, px, py, pz,%%00010%%00009bx, by, bz, cpu, ex, res, ran)%%00010%%00009a.write(inp)%%00010%%00009a.close()%%00010%%00009call([vina, '--config', conf_file])%%00010%%00009os.remove(conf_file)%%00010%%00009os.remove(pre_file)%%00010%%00009os.remove(&quot;OUT_{0}.log&quot;.format(f))%%00010%%00009new_data[f], new_ener[f] = extract(&quot;OUT_{0}.pdbqt&quot;.format(f))%%00010%%00009os.remove(&quot;OUT_{0}.pdbqt&quot;.format(f))%%00010%%00009new_name[f] = f%%00010%%00009print '{0} just finished docking!'.format(f)%%00010%%00010os.chdir(flow_variables['knime.workspace'])%%00010shutil.rmtree('py_temp')%%00010%%00010mode_name = Series(new_name, index=new_name.keys())%%00010mode_file = Series(new_data, index=new_data.keys())%%00010mode_ener = Series(new_ener, index=new_ener.keys())%%00010%%00010output_table = DataFrame([%%00010mode_name,%%00010mode_file,%%00010mode_ener%%00010]).T"/>
<entry key="rowLimit" type="xint" value="1000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Docking Node"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="-327"/>
<entry key="y-coordinate" type="xint" value="322"/>
<entry key="width" type="xint" value="130"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" value="Node to dock single molecules into a protein target using AutoDock Vina."/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python.nodes.script.PythonScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="2.11.0.0045439"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 5, Cols: 3"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="33112fc8-17fc-4d69-9502-9670892da836"/>
</config>
</config>
